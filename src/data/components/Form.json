{
  "component": "Form",
  "props": [
    {
      "name": "colon",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "",
      "required": false
    },
    {
      "name": "data",
      "type": "Object",
      "defaultValue": "{}",
      "description": "",
      "required": false
    },
    {
      "name": "disabled",
      "type": "Boolean",
      "defaultValue": "undefined",
      "description": "",
      "required": false
    },
    {
      "name": "errorMessage",
      "type": "Object",
      "defaultValue": null,
      "description": "",
      "required": false
    },
    {
      "name": "id",
      "type": "String",
      "defaultValue": "undefined",
      "description": "",
      "required": false
    },
    {
      "name": "labelAlign",
      "type": "String",
      "defaultValue": "right",
      "description": "",
      "required": false
    },
    {
      "name": "labelWidth",
      "type": "String / Number",
      "defaultValue": "'100px'",
      "description": "",
      "required": false
    },
    {
      "name": "layout",
      "type": "String",
      "defaultValue": "vertical",
      "description": "",
      "required": false
    },
    {
      "name": "preventSubmitDefault",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "",
      "required": false
    },
    {
      "name": "readonly",
      "type": "Boolean",
      "defaultValue": "undefined",
      "description": "",
      "required": false
    },
    {
      "name": "requiredMark",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "",
      "required": false
    },
    {
      "name": "requiredMarkPosition",
      "type": "String",
      "defaultValue": "left",
      "description": "",
      "required": false
    },
    {
      "name": "resetType",
      "type": "String",
      "defaultValue": "empty",
      "description": "",
      "required": false
    },
    {
      "name": "rules",
      "type": "Object",
      "defaultValue": null,
      "description": "",
      "required": false
    },
    {
      "name": "scrollToFirstError",
      "type": "String",
      "defaultValue": null,
      "description": "",
      "required": false
    },
    {
      "name": "showErrorMessage",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "",
      "required": false
    },
    {
      "name": "statusIcon",
      "type": "Boolean / Slot / Function",
      "defaultValue": "undefined",
      "description": "",
      "required": false
    },
    {
      "name": "submitWithWarningMessage",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "",
      "required": false
    },
    {
      "name": "onReset",
      "type": "Function",
      "defaultValue": null,
      "description": "",
      "required": false
    },
    {
      "name": "onSubmit",
      "type": "Function",
      "defaultValue": null,
      "description": "",
      "required": false
    },
    {
      "name": "onValidate",
      "type": "Function",
      "defaultValue": null,
      "description": "",
      "required": false
    }
  ],
  "events": [
    {
      "name": "reset",
      "params": "`(context: { e?: FormResetEvent })`",
      "description": "表单重置时触发"
    },
    {
      "name": "submit",
      "params": "`(context: SubmitContext<FormData>)`",
      "description": "表单提交时触发。其中 `context.validateResult` 表示校验结果，`context.firstError` 表示校验不通过的第一个规则提醒。`context.validateResult` 值为 `true` 表示校验通过；如果校验不通过，`context.validateResult` 值为校验结果列表。<br />【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加  enter 事件，并在事件中设置 `e.preventDefault()`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }`<br/><br/>`type FormValidateResult<T> = boolean | ValidateResultObj<T>`<br/><br/>`type ValidateResultObj<T> = { [key in keyof T]: boolean | ValidateResultList }`<br/><br/>`type ValidateResultList = Array<AllValidateResult>`<br/><br/>`type AllValidateResult = CustomValidateObj | ValidateResultType`<br/><br/>`interface ValidateResultType extends FormRule { result: boolean }`<br/><br/>`type ValidateResult<T> = { [key in keyof T]: boolean | ErrorList }`<br/><br/>`type ErrorList = Array<FormRule>`<br/>"
    },
    {
      "name": "validate",
      "params": "`(result: ValidateResultContext<FormData>)`",
      "description": "校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>`<br/>"
    }
  ],
  "methods": [
    {
      "name": "clearValidate",
      "params": "`(fields?: Array<keyof FormData>)`",
      "returnType": "\\-",
      "description": "必需。清空校验结果。可使用 fields 指定清除部分字段的校验结果，fields 值为空则表示清除所有字段校验结果。清除邮箱校验结果示例：`clearValidate(['email'])`"
    },
    {
      "name": "reset",
      "params": "`(params?: FormResetParams<FormData>)`",
      "returnType": "\\-",
      "description": "必需。重置表单，表单里面没有重置按钮`<button type=\\\"reset\\\" />`时可以使用该方法，默认重置全部字段为空，该方法会触发 `reset` 事件。<br />如果表单属性 `resetType='empty'` 或者 `reset.type='empty'` 会重置为空；<br />如果表单属性 `resetType='initial'` 或者 `reset.type='initial'` 会重置为表单初始值。<br />`reset.fields` 用于设置具体重置哪些字段，示例：`reset({ type: 'initial', fields: ['name', 'age'] })`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface FormResetParams<FormData> { type?: 'initial' | 'empty'; fields?: Array<keyof FormData> }`<br/>"
    },
    {
      "name": "setValidateMessage",
      "params": "`(message: FormValidateMessage<FormData>)`",
      "returnType": "\\-",
      "description": "必需。设置自定义校验结果，如远程校验信息直接呈现。注意需要在组件挂载结束后使用该方法。`FormData` 指表单数据泛型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`type FormValidateMessage<FormData> = { [field in keyof FormData]: FormItemValidateMessage[] }`<br/><br/>`interface FormItemValidateMessage { type: 'warning' | 'error'; message: string }`<br/>"
    },
    {
      "name": "submit",
      "params": "`(params?: { showErrorMessage?: boolean })`",
      "returnType": "\\-",
      "description": "必需。提交表单，表单里面没有提交按钮`<button type=\\\"submit\\\" />`时可以使用该方法。`showErrorMessage` 表示是否在提交校验不通过时显示校验不通过的原因，默认显示。该方法会触发 `submit` 事件"
    },
    {
      "name": "validate",
      "params": "`(params?: FormValidateParams)`",
      "returnType": "`Promise<FormValidateResult<FormData>>`",
      "description": "必需。校验函数，包含错误文本提示等功能。泛型 `FormData` 表示表单数据 TS 类型。<br/>【关于参数】`params.fields` 表示校验字段，如果设置了 `fields`，本次校验将仅对这些字段进行校验。`params.trigger` 表示本次触发校验的范围，'params.trigger = blur' 表示只触发校验规则设定为 trigger='blur' 的字段，'params.trigger = change' 表示只触发校验规则设定为 trigger='change' 的字段，默认触发全范围校验。`params.showErrorMessage` 表示校验结束后是否显示错误文本提示，默认显示。<br />【关于返回值】返回值为 true 表示校验通过；如果校验不通过，返回值为校验结果列表。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface FormValidateParams { fields?: Array<string>; showErrorMessage?: boolean; trigger?: ValidateTriggerType }`<br/><br/>`type ValidateTriggerType = 'blur' | 'change' | 'submit' | 'all'`<br/>"
    },
    {
      "name": "validateOnly",
      "params": "`(params?: Pick<FormValidateParams, 'fields' | 'trigger'>)`",
      "returnType": "`Promise<FormValidateResult<FormData>>`",
      "description": "必需。纯净的校验函数，仅返回校验结果，不对组件进行任何操作。泛型 `FormData` 表示表单数据 TS 类型。参数和返回值含义同 `validate` 方法"
    }
  ]
}